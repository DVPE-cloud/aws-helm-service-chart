# Values for default microservice projects

#possible values are ui and backend
project:
  includeAwsCredentials: false

#-------------------------------#
# deployment.yaml value section #
#-------------------------------#

replicas: 2

image:
  repository:
  tag: latest
  pullPolicy: Always

connection:
  http:
    port: 8080

resources:
  limits:
    cpu: 200m
    memory: 235M
  requests:
    cpu: 150m
    memory: 200M

containers:
  readinessProbe:
    httpGet:
      path:

#--------------------------------#
# autoscaling.yaml value section #
#--------------------------------#

autoscaling:
  minReplicas: 2
  maxReplicas: 5
  metrics:
    resource:
      cpu:
        targetAverageUtilization: 80
      #memory:
      #  targetAverageUtilization: 90
        #targetAverageValue: 200Mi

#----------------------------#
# ingress.yaml value section #
#----------------------------#

ingress:
  ext:
    enabled: false
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA"
    class: ingress-extranet
    path: /
    host:
    servicePort: 8080
  int:
    enabled: false
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA"
    class: ingress-intranet
    path: /
    host:
    servicePort: 8080

#-------------------------------#
# service.yaml value section    #
#-------------------------------#

service:
  spec:
    type: ClusterIP
    ports:
      http: 8080
      targetPort: 8080

#-------------------------------#
# secret.yaml value section     #
#-------------------------------#
secret:
    aws_accesskey:
    aws_secretkey:

#-------------------------------------#
# tls.yaml/ingress.yaml value section #
#-------------------------------------#
tls:
  issuer:
    name: letsencrypt-staging
    spec:
      acme:
        email:
  cert:
    ext:
      secret:
        name: service-cert-tls
    int:
      secret:
        name: internal-wildcard-tls-secret
        crt:
        key: